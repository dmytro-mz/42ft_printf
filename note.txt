# - The value should be converted to an “alternate form”.
    For c, s, p, d, i, and u conversions, this option has no effect.
    For x and X conversions, a non-zero result has the string ‘0x’ (or ‘0X’ for X conversions) prepended to it.

0 - Zero padding.
    padded on the left with zeros rather than blanks.
    If a precision is given with a numeric conversion (d, i, u, i, x, and X), the 0 flag is ignored.

- - converted value is to be left adjusted on the field boundary;
    the converted value is padded on the right with blanks;
    overrides a 0 if both are given.

space - A blank should be left before a positive number produced by a signed conversion (d, i).

+ - A sign must always be placed before a number produced by a signed conversion.
    A + overrides a space if both are used.

---- An optional decimal digit string specifying a minimum field width.  If the converted value has fewer characters than the field width, it will be padded with spaces on the left

. - An optional precision, in the form of a period . followed by an optional digit string.
    If the digit string is omitted, the precision is taken as zero.
    This gives the minimum number of digits to appear for d, i, u, x, and X conversions,
    or the maximum number of characters to be printed from a string for s conversions.
    if the converted value requires fewer digits, it is padded on the left with zeros.

=======================================================
c - The int argument is converted to an unsigned char
s - The char * argument is expected to be a pointer to an array of character type (pointer to a string).
    Characters from the array are written up to (but not including) a terminating NUL character;
    if a precision is specified, no more than the number specified are written.
    If a precision is given, no null character need be present;
    if the precision is not specified, or is greater than the size of the array,
    the array must contain a terminating NUL character.
p - The void * pointer argument is printed in hexadecimal (as if by ‘%#x’ or ‘%#lx’).
d - decimal (base 10) number
i - integer in base 10
u - unsigned decimal (base 10) number
x - number in hexadecimal (base 16) lowercase format
X - number in hexadecimal (base 16) uppercase format
% - %

--- In no case does a non-existent or small field width cause truncation of a numeric field; if the result of a conversion is wider than the field width, the field is expanded to contain the conversion result.
